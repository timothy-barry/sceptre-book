# Running multiple analyses {#sec-multiple_analyses}

In this chapter we recommend strategies for carrying out multiple `sceptre` analyses on a single dataset, such as

-   running *cis* and *trans* analyses;

-   running analyses with gRNAs grouped based on target and with singleton gRNAs.

We begin by loading the `sceptre` package.

```{r,results='hide'}
library(sceptre)
```

## Running *cis* and *trans* analyses

Some users may wish to run both a *cis* analysis and a *trans* analysis. We recommend that such users apply the `sceptre` pipeline twice: once to analyze the *cis* pairs and once to analyze the *trans* pairs. We illustrate this approach on the high-MOI CRISPRi data; we begin by creating a `sceptre_object` to represent these data.

```{r}
sceptre_object <- import_data(
  response_matrix = highmoi_example_data$response_matrix,
  grna_matrix = highmoi_example_data$grna_matrix,
  grna_target_data_frame = grna_target_data_frame_highmoi,
  moi = "high",
  extra_covariates = highmoi_example_data$extra_covariates,
  response_names = highmoi_example_data$gene_names
)
```

First, we carry out an analysis of the *cis* pairs, storing the results in the directory `"~/sceptre_results_cis"`.

```{r,results='hide'}

# positive control pairs
positive_control_pairs <- construct_positive_control_pairs(sceptre_object)

# cis pairs
discovery_pairs_cis <- construct_cis_pairs(
  sceptre_object = sceptre_object,
  positive_control_pairs = positive_control_pairs,
  distance_threshold = 5e6
)
# run cis analysis
sceptre_object <- sceptre_object |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_cis,
    positive_control_pairs = positive_control_pairs,
    side = "left"
  ) |>
  assign_grnas(parallel = TRUE) |>
  run_qc(p_mito_threshold = 0.075) |>
  run_calibration_check(parallel = TRUE) |>
  run_power_check(parallel = TRUE) |>
  run_discovery_analysis(parallel = TRUE)

# write outputs
write_outputs_to_directory(
  sceptre_object = sceptre_object,
  directory = "~/sceptre_results_cis"
)
```

Next, we carry out an analysis of the *trans* pairs, storing the results in `"~/sceptre_results_trans"`. 

```{r,results='hide'}
# trans pairs
discovery_pairs_trans <- construct_trans_pairs(
  sceptre_object = sceptre_object,
  positive_control_pairs = positive_control_pairs,
  exclude_positive_control_targets = TRUE
)
# run trans analysis
sceptre_object <- sceptre_object |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_trans,
    positive_control_pairs = positive_control_pairs,
    side = "both"
  ) |>
  assign_grnas(parallel = TRUE) |>
  run_qc(p_mito_threshold = 0.075) |>
  run_calibration_check(parallel = TRUE) |>
  run_power_check(parallel = TRUE) |>
  run_discovery_analysis(parallel = TRUE)

# write outputs
write_outputs_to_directory(
  sceptre_object = sceptre_object,
  directory = "~/sceptre_results_trans"
)
```

Note that we update the `sceptre_object` with the output of the *cis* analysis. We then use the same `sceptre_object` to carry out the *trans* analysis. Under the hood `sceptre` stores (or "caches") intermediate computations carried out as part of the *cis* analysis inside the `sceptre_object`. These intermediate computations are then recycled to carry out the *trans* analysis, thereby reducing compute.

## Running singleton and grouped analyses

Another common analysis paradigm is to run both a grouped analysis (in which gRNAs targeting the same site are integrated or "combined") and a singleton analysis (in which gRNAs targeting the same site are analyzed individually). We carried out a grouped analysis of the *cis* pairs on the high-MOI CRISPRi data above. Below, we conduct a singleton analysis on the same set of pairs, storing the result in `"~/sceptre_results_cis_singleton"`. We operate on the same `sceptre_object` so as to exploit caching.

```{r,results='hide'}
# singleton cis analysis
sceptre_object <- sceptre_object |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_cis,
    positive_control_pairs = positive_control_pairs,
    side = "left",
    grna_integration_strategy = "singleton"
  ) |>
  assign_grnas(parallel = TRUE) |>
  run_qc(p_mito_threshold = 0.075) |>
  run_calibration_check(parallel = TRUE) |>
  run_power_check(parallel = TRUE) |>
  run_discovery_analysis(parallel = TRUE)

# write outputs
write_outputs_to_directory(
  sceptre_object = sceptre_object,
  directory = "~/sceptre_results_cis_singleton"
)
```

In summary, to carry out multiple analyses on the same dataset, users should apply the `sceptre` pipeline multiple times, reusing the underlying `sceptre_object` to exploit caching and reduce compute.
