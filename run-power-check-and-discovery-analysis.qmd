# Run power check and discovery analysis

The next steps of the pipeline are to run the power check and the discovery analysis. The power check entails applying `sceptre` to analyze positive control pairs --- pairs for which we know there is an association between the target and the response --- to ensure that `sceptre` is capable of detecting true associations. The discovery analysis, meanwhile, involves applying `sceptre` to analyze discovery pairs, or target-response pairs whose association status we do not know but seek to learn. Identifying associations among the discovery pairs is the primary objective of the single-cell CRISPR screen analysis. We explicate both the power check and discovery analysis in this chapter given the similarity of these two analyses.

```{r, out.width = "650px", fig.align="center", echo = FALSE}
knitr::include_graphics("pipeline_schematic_step_6_7.png")
```

We load the `sceptre` and `dplyr` packages.

```{r,results='hide'}
library(sceptre)
library(dplyr)
```

```{r, echo = FALSE, results = 'hide', message=FALSE}
conflicted::conflicts_prefer(dplyr::filter)
```

We initialize `sceptre_object`s corresponding to the high-MOI CRISPRi data and low-MOI CRISPRko data. We call all pipeline functions that precede `run_power_check()` and `run_discovery_analysis()` (namely, `import_data()`, `set_analysis_parameters()`, `assign_grnas()`, `run_qc()`, and `run_calibration_check()`) on both datasets.

```{r,results='hide'}
# low-MOI CRISPRko data
# 1. import data
sceptre_object_lowmoi <- import_data(
  response_matrix = lowmoi_example_data$response_matrix,
  grna_matrix = lowmoi_example_data$grna_matrix,
  extra_covariates = lowmoi_example_data$extra_covariates,
  grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,
  moi = "low"
)
positive_control_pairs_lowmoi <- construct_positive_control_pairs(
  sceptre_object = sceptre_object_lowmoi
)
discovery_pairs_lowmoi <- construct_trans_pairs(
  sceptre_object = sceptre_object_lowmoi,
  positive_control_pairs = positive_control_pairs_lowmoi
)

# 2-5. set analysis parameters, assign gRNAs, run qc, run calibration check
sceptre_object_lowmoi <- sceptre_object_lowmoi |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_lowmoi,
    positive_control_pairs = positive_control_pairs_lowmoi
  ) |>
  assign_grnas() |>
  run_qc(p_mito_threshold = 0.075) |>
  run_calibration_check(parallel = TRUE)
```

```{r, results='hide'}
# high-MOI CRISPRi data
# 1. import data
sceptre_object_highmoi <- import_data(
  response_matrix = highmoi_example_data$response_matrix,
  grna_matrix = highmoi_example_data$grna_matrix,
  grna_target_data_frame = grna_target_data_frame_highmoi,
  moi = "high",
  extra_covariates = highmoi_example_data$extra_covariates,
  response_names = highmoi_example_data$gene_names
)
positive_control_pairs_highmoi <- construct_positive_control_pairs(
  sceptre_object = sceptre_object_highmoi)
discovery_pairs_highmoi <- construct_cis_pairs(sceptre_object_highmoi,
  positive_control_pairs = positive_control_pairs_highmoi,
  distance_threshold = 5e6
)

# 2-4. set analysis parameters, assign gRNAs, run qc, run calibration check
sceptre_object_highmoi <- sceptre_object_highmoi |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_highmoi,
    positive_control_pairs = positive_control_pairs_highmoi,
    side = "left"
  ) |>
  assign_grnas(parallel = TRUE) |>
  run_qc(p_mito_threshold = 0.075) |>
  run_calibration_check(parallel = TRUE)
```

We are now ready to run the power check and discovery analysis.

## Run power check

We run the power check by calling the function `run_power_check()`, which takes the arguments `sceptre_object` (required), `output_amount` (optional), `print_progress` (optional), and `parallel` (optional). `output_amount` controls the amount of information that `run_power_check()` returns; see @sec-run_calibration_check_output_amount of *Run calibration check* for more information about this argument. `print_progress` and `parallel` are logical values indicating whether to print progress updates and run the computation in parallel, respectively. We run the power check on the low-MOI CRISPRko data.

```{r,results='hide'}
sceptre_object_lowmoi <- run_power_check(
  sceptre_object = sceptre_object_lowmoi,
  parallel = TRUE
)
```

We call `plot()` on the resulting `sceptre_object` to visualize the outcome of the power check.

```{r, eval=FALSE}
plot(sceptre_object_lowmoi)
```

```{r, out.width = "500px", fig.align="center", echo = FALSE, fig.cap="Power check results on the low-MOI CRISPRko data."}
p <- plot(sceptre_object_lowmoi)
ggplot2::ggsave(filename = "plot_power_check_lowmoi.png", plot = p, device = "png", scale = 1.1, width = 4, height = 3, dpi = 330)
knitr::include_graphics("plot_power_check_lowmoi.png")
```

We described how to interpret this plot in @sec-sceptre_run_power_check of *The whole game*. Briefly, each point represents a pair, and the vertical position of a given point indicates the p-value of the corresponding pair. Points in the left (resp., right) column are positive control (resp, negative control) pairs. The positive control p-values should be generally smaller (i.e., more significant) than the negative control p-values.

## Run discovery analysis

We run the discovery analysis by calling the function `run_discovery_analysis()`, which takes the same arguments as `run_power_check()`. We illustrate this function on the low-MOI CRISPRko data.

```{r,results='hide'}
sceptre_object_lowmoi <- run_discovery_analysis(
  sceptre_object = sceptre_object_lowmoi,
  parallel = TRUE
)
```

We can visualize the outcome of the discovery analysis by calling `plot()` on the resulting `sceptre_object`.

```{r, eval=FALSE}
plot(sceptre_object_lowmoi)
```

```{r, out.width = "650px", fig.align="center", echo = FALSE, fig.cap="Discovery analysis results on the low-MOI CRISPRko data."}
p <- plot(sceptre_object_lowmoi)
ggplot2::ggsave(filename = "plot_discovery_analysis_lowmoi.png", plot = p, device = "png", scale = 1.1, width = 5, height = 4, dpi = 330)
knitr::include_graphics("plot_discovery_analysis_lowmoi.png")
```

We described how to interpret this plot in @sec-sceptre_run_discovery_analysis of *The whole game*. Briefly, the top left (resp. right) panel is a QQ plot of the negative control p-values and the discovery p-values plotted on an untransformed (resp., transformed) scale. The bottom left panel plots the p-value of each discovery pair against its log-2-fold-change. Finally, the bottom right panel displays the number of discoveries that `sceptre` makes on the discovery set (after applying the multiplicity correction).

## Inspecting the results

We can obtain a data frame containing the results by calling `get_result()` on the `sceptre_object`, setting the parameter `analysis` to the name of the function whose results we are querying. For example, we can obtain the discovery results as follows.

```{r}
discovery_result <- get_result(
  sceptre_object = sceptre_object_lowmoi,
  analysis = "run_discovery_analysis"
)
head(discovery_result)
```

The data frame `discovery_result` contains the columns `response_id`, `grna_target`, `n_nonzero_trt`, `n_nonzero_cntrl`, `pass_qc`, `p_value`, `log_2_fold_change`, and `significant`; see @sec-run-calibration-check_running_the_calibration_check of *Run calibration check* for a description of these columns. The rows are ordered according to `p_value`. Pairs called as significant are stored in the top rows of the data frame; pairs called as insignificant are stored in the middle rows; and pairs filtered out by pairwise QC are stored in the bottom rows. (The latter pairs have a value of `NA` in the `p_value`, `log_2_fold_change`, and `significant` columns.)

The format of the result data frame is slightly different when we use the "singleton" gRNA integration strategy rather than the default "union" strategy. To illustrate, we again analyze the low-MOI CRISPRko data, this time setting `grna_integration_strategy` to `"singleton"` in `set_analysis_parameters()`. We then call `assign_grnas()`, `run_qc()`, and `run_discovery_analysis()`.

```{r,results='hide'}
sceptre_object_lowmoi <- sceptre_object_lowmoi |>
  set_analysis_parameters(
    discovery_pairs = discovery_pairs_lowmoi,
    positive_control_pairs = positive_control_pairs_lowmoi,
    grna_integration_strategy = "singleton"
  ) |>
  assign_grnas() |>
  run_qc(p_mito_threshold = 0.075) |>
  run_discovery_analysis(parallel = TRUE)
```

The result data frame obtained via `get_result()` contains the additional column `grna_id`. Each row of this data frame corresponds to an individual *gRNA-response pair* (as opposed to *target-response pair*).

```{r}
discovery_result <- get_result(
  sceptre_object = sceptre_object_lowmoi,
  analysis = "run_discovery_analysis"
)
head(discovery_result)
```

We can filter for a given target to view the p-values of the individual gRNAs targeting that target. For example, we filter the result data frame for rows containing response ID "PSMB9" and gRNA target "IFNGR2," displaying the columns `response_id`, `grna_id`, `grna_target`, `p_value`, `significant`, and `n_nonzero_trt`.

```{r}
discovery_result |>
  filter(response_id == "PSMB9", grna_target == "IFNGR2") |>
  select(response_id, grna_id, grna_target, p_value, significant, n_nonzero_trt)
```

The individual gRNAs that target "IFNGR2" are "IFNGR2g1," "IFNGR2g2," IFNGR2g3," and "IFNGR2g4." All produce a significant association except "IFNGR2g4." The latter likely does not produce a significant association because the pair consisting of gRNA IFNGR2g4 and response PSMB9 has a smaller effective sample size than the other pairs (as quantified by `n_nonzero_trt`).

## Writing the outputs to a directory

We can write all outputs (i.e., results and plots) of an analysis to a directory on disk via the function `write_outputs_to_directory()`. See @sec-sceptre_write_outputs_to_directory of *The whole game* for a description of this function.
